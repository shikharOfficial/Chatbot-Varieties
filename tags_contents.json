{
    "break_down_into_small_reusable_components.html": {
        "title": [
            "Break down into small reusable components"
        ],
        "body": [
            "\n<nav role=\"toc\">\n<ul>\n<li><a href=\"introduction.html\">Introduction</a></li>\n<li><a href=\"use_angular_cli.html\">Use Angular CLI</a></li>\n<li><a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a></li>\n<li><a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a></li>\n<li><a href=\"use_es6_features.html\">Use ES6 features</a></li>\n<li><a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a></li>\n<li class=\"active\"><a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable\n          components</a></li>\n<li><a href=\"use_lazy_loading.html\">Use Lazy Loading</a></li>\n<li><a href=\"use_indexts.html\">Use Index.ts</a></li>\n<li><a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a></li>\n<li><a href=\"cache_api_calls.html\"> Cache API calls</a></li>\n<li><a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a></li>\n<li><a href=\"declare_safe_strings.html\">Declare safe strings</a></li>\n<li><a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a></li>\n<li><a href=\"state_management.html\">State management</a></li>\n<li><a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a></li>\n</ul>\n</nav>\n<main role=\"main\">\n<article aria-labelledby=\"f3484224___Toc61856911\" role=\"article\">\n<h1 class=\"title topictitle1\" id=\"f3484224___Toc61856911\">Break down into small reusable components</h1>\n<div class=\"body conbody\">\n<p class=\"p\">This is an extension of the single responsibility principle. Large components are very difficult to\n          debug, manage, and test. If a component becomes large, break it down into more reusable smaller components to\n          reduce duplication of the code, so that we can easily manage, maintain, and debug with less effort.</p>\n<p class=\"p\">Angular best practices - parent component</p>\n</div>\n</article>\n</main>\n"
        ],
        "ul": [
            "\n<li><a href=\"introduction.html\">Introduction</a></li>\n<li><a href=\"use_angular_cli.html\">Use Angular CLI</a></li>\n<li><a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a></li>\n<li><a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a></li>\n<li><a href=\"use_es6_features.html\">Use ES6 features</a></li>\n<li><a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a></li>\n<li class=\"active\"><a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable\n          components</a></li>\n<li><a href=\"use_lazy_loading.html\">Use Lazy Loading</a></li>\n<li><a href=\"use_indexts.html\">Use Index.ts</a></li>\n<li><a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a></li>\n<li><a href=\"cache_api_calls.html\"> Cache API calls</a></li>\n<li><a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a></li>\n<li><a href=\"declare_safe_strings.html\">Declare safe strings</a></li>\n<li><a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a></li>\n<li><a href=\"state_management.html\">State management</a></li>\n<li><a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a></li>\n"
        ],
        "li": [
            "<a href=\"introduction.html\">Introduction</a>",
            "<a href=\"use_angular_cli.html\">Use Angular CLI</a>",
            "<a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a>",
            "<a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a>",
            "<a href=\"use_es6_features.html\">Use ES6 features</a>",
            "<a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a>",
            "<a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable\n          components</a>",
            "<a href=\"use_lazy_loading.html\">Use Lazy Loading</a>",
            "<a href=\"use_indexts.html\">Use Index.ts</a>",
            "<a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a>",
            "<a href=\"cache_api_calls.html\"> Cache API calls</a>",
            "<a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a>",
            "<a href=\"declare_safe_strings.html\">Declare safe strings</a>",
            "<a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a>",
            "<a href=\"state_management.html\">State management</a>",
            "<a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a>"
        ],
        "a": [
            "Introduction",
            "Use Angular CLI",
            "Maintain proper folder structure",
            "Follow consistent Angular coding styles",
            "Use ES6 features",
            "Use trackBy along with ngFor",
            "Break down into small reusable\n          components",
            "Use Lazy Loading",
            "Use Index.ts",
            "Avoid logic in templates",
            " Cache API calls",
            "Use async pipe in templates",
            "Declare safe strings",
            "Avoid any type when declaring constants\n          and variables",
            "State management",
            "Use CDK Virtual Scroll"
        ],
        "article": [
            "\n<h1 class=\"title topictitle1\" id=\"f3484224___Toc61856911\">Break down into small reusable components</h1>\n<div class=\"body conbody\">\n<p class=\"p\">This is an extension of the single responsibility principle. Large components are very difficult to\n          debug, manage, and test. If a component becomes large, break it down into more reusable smaller components to\n          reduce duplication of the code, so that we can easily manage, maintain, and debug with less effort.</p>\n<p class=\"p\">Angular best practices - parent component</p>\n</div>\n"
        ],
        "div": [
            "\n<p class=\"p\">This is an extension of the single responsibility principle. Large components are very difficult to\n          debug, manage, and test. If a component becomes large, break it down into more reusable smaller components to\n          reduce duplication of the code, so that we can easily manage, maintain, and debug with less effort.</p>\n<p class=\"p\">Angular best practices - parent component</p>\n"
        ],
        "p": [
            "This is an extension of the single responsibility principle. Large components are very difficult to\n          debug, manage, and test. If a component becomes large, break it down into more reusable smaller components to\n          reduce duplication of the code, so that we can easily manage, maintain, and debug with less effort.",
            "Angular best practices - parent component"
        ]
    },
    "cache_api_calls.html": {
        "title": [
            "Cache API calls"
        ],
        "body": [
            "\n<nav role=\"toc\">\n<ul>\n<li><a href=\"introduction.html\">Introduction</a></li>\n<li><a href=\"use_angular_cli.html\">Use Angular CLI</a></li>\n<li><a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a></li>\n<li><a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a></li>\n<li><a href=\"use_es6_features.html\">Use ES6 features</a></li>\n<li><a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a></li>\n<li><a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a></li>\n<li><a href=\"use_lazy_loading.html\">Use Lazy Loading</a></li>\n<li><a href=\"use_indexts.html\">Use Index.ts</a></li>\n<li><a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a></li>\n<li class=\"active\"><a href=\"cache_api_calls.html\"> Cache API calls</a></li>\n<li><a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a></li>\n<li><a href=\"declare_safe_strings.html\">Declare safe strings</a></li>\n<li><a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a></li>\n<li><a href=\"state_management.html\">State management</a></li>\n<li><a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a></li>\n</ul>\n</nav>\n<main role=\"main\">\n<article aria-labelledby=\"t8609396___Toc61856915\" role=\"article\">\n<h1 class=\"title topictitle1\" id=\"t8609396___Toc61856915\"> Cache API calls</h1>\n<div class=\"body conbody\">\n<p class=\"p\">Responses from some API calls do not change frequently. In those cases, we can add a caching\n          mechanism and store the value from an API. When another request to the same API is made, we get a response\n          from the check. If there is no value available in the cache then we make an API call and store the result. <a class=\"xref\" href=\"introduction.html#m1761954__tbl1\">Table 1</a></p>\n<p class=\"p\">We can introduce a cache time for some API calls when the value changes infrequently. Caching API\n          calls and avoiding unwanted duplicate API calls improves speed of the application and ensures we do not\n          download the same information repeatedly.</p>\n</div>\n</article>\n</main>\n"
        ],
        "ul": [
            "\n<li><a href=\"introduction.html\">Introduction</a></li>\n<li><a href=\"use_angular_cli.html\">Use Angular CLI</a></li>\n<li><a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a></li>\n<li><a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a></li>\n<li><a href=\"use_es6_features.html\">Use ES6 features</a></li>\n<li><a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a></li>\n<li><a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a></li>\n<li><a href=\"use_lazy_loading.html\">Use Lazy Loading</a></li>\n<li><a href=\"use_indexts.html\">Use Index.ts</a></li>\n<li><a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a></li>\n<li class=\"active\"><a href=\"cache_api_calls.html\"> Cache API calls</a></li>\n<li><a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a></li>\n<li><a href=\"declare_safe_strings.html\">Declare safe strings</a></li>\n<li><a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a></li>\n<li><a href=\"state_management.html\">State management</a></li>\n<li><a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a></li>\n"
        ],
        "li": [
            "<a href=\"introduction.html\">Introduction</a>",
            "<a href=\"use_angular_cli.html\">Use Angular CLI</a>",
            "<a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a>",
            "<a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a>",
            "<a href=\"use_es6_features.html\">Use ES6 features</a>",
            "<a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a>",
            "<a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a>",
            "<a href=\"use_lazy_loading.html\">Use Lazy Loading</a>",
            "<a href=\"use_indexts.html\">Use Index.ts</a>",
            "<a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a>",
            "<a href=\"cache_api_calls.html\"> Cache API calls</a>",
            "<a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a>",
            "<a href=\"declare_safe_strings.html\">Declare safe strings</a>",
            "<a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a>",
            "<a href=\"state_management.html\">State management</a>",
            "<a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a>"
        ],
        "a": [
            "Introduction",
            "Use Angular CLI",
            "Maintain proper folder structure",
            "Follow consistent Angular coding styles",
            "Use ES6 features",
            "Use trackBy along with ngFor",
            "Break down into small reusable components",
            "Use Lazy Loading",
            "Use Index.ts",
            "Avoid logic in templates",
            " Cache API calls",
            "Use async pipe in templates",
            "Declare safe strings",
            "Avoid any type when declaring constants\n          and variables",
            "State management",
            "Use CDK Virtual Scroll",
            "Table 1"
        ],
        "article": [
            "\n<h1 class=\"title topictitle1\" id=\"t8609396___Toc61856915\"> Cache API calls</h1>\n<div class=\"body conbody\">\n<p class=\"p\">Responses from some API calls do not change frequently. In those cases, we can add a caching\n          mechanism and store the value from an API. When another request to the same API is made, we get a response\n          from the check. If there is no value available in the cache then we make an API call and store the result. <a class=\"xref\" href=\"introduction.html#m1761954__tbl1\">Table 1</a></p>\n<p class=\"p\">We can introduce a cache time for some API calls when the value changes infrequently. Caching API\n          calls and avoiding unwanted duplicate API calls improves speed of the application and ensures we do not\n          download the same information repeatedly.</p>\n</div>\n"
        ],
        "div": [
            "\n<p class=\"p\">Responses from some API calls do not change frequently. In those cases, we can add a caching\n          mechanism and store the value from an API. When another request to the same API is made, we get a response\n          from the check. If there is no value available in the cache then we make an API call and store the result. <a class=\"xref\" href=\"introduction.html#m1761954__tbl1\">Table 1</a></p>\n<p class=\"p\">We can introduce a cache time for some API calls when the value changes infrequently. Caching API\n          calls and avoiding unwanted duplicate API calls improves speed of the application and ensures we do not\n          download the same information repeatedly.</p>\n"
        ],
        "p": [
            "Responses from some API calls do not change frequently. In those cases, we can add a caching\n          mechanism and store the value from an API. When another request to the same API is made, we get a response\n          from the check. If there is no value available in the cache then we make an API call and store the result. <a class=\"xref\" href=\"introduction.html#m1761954__tbl1\">Table 1</a>",
            "We can introduce a cache time for some API calls when the value changes infrequently. Caching API\n          calls and avoiding unwanted duplicate API calls improves speed of the application and ensures we do not\n          download the same information repeatedly."
        ]
    },
    "avoid_any_type_when_declaring_constants_and_variables.html": {
        "title": [
            "Avoid any type when declaring constants and variables"
        ],
        "body": [
            "\n<nav role=\"toc\">\n<ul>\n<li><a href=\"introduction.html\">Introduction</a></li>\n<li><a href=\"use_angular_cli.html\">Use Angular CLI</a></li>\n<li><a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a></li>\n<li><a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a></li>\n<li><a href=\"use_es6_features.html\">Use ES6 features</a></li>\n<li><a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a></li>\n<li><a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a></li>\n<li><a href=\"use_lazy_loading.html\">Use Lazy Loading</a></li>\n<li><a href=\"use_indexts.html\">Use Index.ts</a></li>\n<li><a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a></li>\n<li><a href=\"cache_api_calls.html\"> Cache API calls</a></li>\n<li><a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a></li>\n<li><a href=\"declare_safe_strings.html\">Declare safe strings</a></li>\n<li class=\"active\"><a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when\n          declaring constants and variables</a></li>\n<li><a href=\"state_management.html\">State management</a></li>\n<li><a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a></li>\n</ul>\n</nav>\n<main role=\"main\">\n<article aria-labelledby=\"y9007737___Toc61856918\" role=\"article\">\n<h1 class=\"title topictitle1\" id=\"y9007737___Toc61856918\">Avoid any type when declaring constants and variables\n      </h1>\n<div class=\"body\">\n<p class=\"p\">Declare variables or constants with proper types other than any. This will reduce unintended\n          problems. Another advantage of having good typing in our application is that it makes refactoring easier. If\n          we had a proper typing, we would get a compile-time error as shown below:</p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export interface HotFolder {</p>\n<p class=\"p\"> id: string;</p>\n<p class=\"p\"> folderName: string;</p>\n<p class=\"p\"> enabled: string;</p>\n<p class=\"p\"> processDefinitionName: string;</p>\n<p class=\"p\"> params: { [key: string]: string };</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export class HotFoldersAddComponent implements OnInit</p>\n<p class=\"p\">hotFolder: HotFolder;</p>\n<p class=\"p\">constructor() {</p>\n<p class=\"p\"> }</p>\n<p class=\"p\">ngOnInit() {</p>\n<p class=\"p\">this.hotFolder = {</p>\n<p class=\"p\">id: 12345,</p>\n<p class=\"p\">folderName: ' /home/rsuite/test ',</p>\n<p class=\"p\">enabled: true,</p>\n<p class=\"p\">path: ‘test’</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"p\">// Error</p>\n<p class=\"p\">Type ‘{ id: number; foldername: string; path: string; }’ is not assignable to type ‘hotFolder.</p>\n<p class=\"p\">Object literal may only specify known properties, and ‘path does not exist in type ‘hotFolder.</p>\n</div>\n</article>\n</main>\n"
        ],
        "ul": [
            "\n<li><a href=\"introduction.html\">Introduction</a></li>\n<li><a href=\"use_angular_cli.html\">Use Angular CLI</a></li>\n<li><a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a></li>\n<li><a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a></li>\n<li><a href=\"use_es6_features.html\">Use ES6 features</a></li>\n<li><a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a></li>\n<li><a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a></li>\n<li><a href=\"use_lazy_loading.html\">Use Lazy Loading</a></li>\n<li><a href=\"use_indexts.html\">Use Index.ts</a></li>\n<li><a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a></li>\n<li><a href=\"cache_api_calls.html\"> Cache API calls</a></li>\n<li><a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a></li>\n<li><a href=\"declare_safe_strings.html\">Declare safe strings</a></li>\n<li class=\"active\"><a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when\n          declaring constants and variables</a></li>\n<li><a href=\"state_management.html\">State management</a></li>\n<li><a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a></li>\n"
        ],
        "li": [
            "<a href=\"introduction.html\">Introduction</a>",
            "<a href=\"use_angular_cli.html\">Use Angular CLI</a>",
            "<a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a>",
            "<a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a>",
            "<a href=\"use_es6_features.html\">Use ES6 features</a>",
            "<a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a>",
            "<a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a>",
            "<a href=\"use_lazy_loading.html\">Use Lazy Loading</a>",
            "<a href=\"use_indexts.html\">Use Index.ts</a>",
            "<a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a>",
            "<a href=\"cache_api_calls.html\"> Cache API calls</a>",
            "<a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a>",
            "<a href=\"declare_safe_strings.html\">Declare safe strings</a>",
            "<a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when\n          declaring constants and variables</a>",
            "<a href=\"state_management.html\">State management</a>",
            "<a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a>"
        ],
        "a": [
            "Introduction",
            "Use Angular CLI",
            "Maintain proper folder structure",
            "Follow consistent Angular coding styles",
            "Use ES6 features",
            "Use trackBy along with ngFor",
            "Break down into small reusable components",
            "Use Lazy Loading",
            "Use Index.ts",
            "Avoid logic in templates",
            " Cache API calls",
            "Use async pipe in templates",
            "Declare safe strings",
            "Avoid any type when\n          declaring constants and variables",
            "State management",
            "Use CDK Virtual Scroll"
        ],
        "article": [
            "\n<h1 class=\"title topictitle1\" id=\"y9007737___Toc61856918\">Avoid any type when declaring constants and variables\n      </h1>\n<div class=\"body\">\n<p class=\"p\">Declare variables or constants with proper types other than any. This will reduce unintended\n          problems. Another advantage of having good typing in our application is that it makes refactoring easier. If\n          we had a proper typing, we would get a compile-time error as shown below:</p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export interface HotFolder {</p>\n<p class=\"p\"> id: string;</p>\n<p class=\"p\"> folderName: string;</p>\n<p class=\"p\"> enabled: string;</p>\n<p class=\"p\"> processDefinitionName: string;</p>\n<p class=\"p\"> params: { [key: string]: string };</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export class HotFoldersAddComponent implements OnInit</p>\n<p class=\"p\">hotFolder: HotFolder;</p>\n<p class=\"p\">constructor() {</p>\n<p class=\"p\"> }</p>\n<p class=\"p\">ngOnInit() {</p>\n<p class=\"p\">this.hotFolder = {</p>\n<p class=\"p\">id: 12345,</p>\n<p class=\"p\">folderName: ' /home/rsuite/test ',</p>\n<p class=\"p\">enabled: true,</p>\n<p class=\"p\">path: ‘test’</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"p\">// Error</p>\n<p class=\"p\">Type ‘{ id: number; foldername: string; path: string; }’ is not assignable to type ‘hotFolder.</p>\n<p class=\"p\">Object literal may only specify known properties, and ‘path does not exist in type ‘hotFolder.</p>\n</div>\n"
        ],
        "div": [
            "\n<p class=\"p\">Declare variables or constants with proper types other than any. This will reduce unintended\n          problems. Another advantage of having good typing in our application is that it makes refactoring easier. If\n          we had a proper typing, we would get a compile-time error as shown below:</p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export interface HotFolder {</p>\n<p class=\"p\"> id: string;</p>\n<p class=\"p\"> folderName: string;</p>\n<p class=\"p\"> enabled: string;</p>\n<p class=\"p\"> processDefinitionName: string;</p>\n<p class=\"p\"> params: { [key: string]: string };</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export class HotFoldersAddComponent implements OnInit</p>\n<p class=\"p\">hotFolder: HotFolder;</p>\n<p class=\"p\">constructor() {</p>\n<p class=\"p\"> }</p>\n<p class=\"p\">ngOnInit() {</p>\n<p class=\"p\">this.hotFolder = {</p>\n<p class=\"p\">id: 12345,</p>\n<p class=\"p\">folderName: ' /home/rsuite/test ',</p>\n<p class=\"p\">enabled: true,</p>\n<p class=\"p\">path: ‘test’</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"p\">// Error</p>\n<p class=\"p\">Type ‘{ id: number; foldername: string; path: string; }’ is not assignable to type ‘hotFolder.</p>\n<p class=\"p\">Object literal may only specify known properties, and ‘path does not exist in type ‘hotFolder.</p>\n"
        ],
        "p": [
            "Declare variables or constants with proper types other than any. This will reduce unintended\n          problems. Another advantage of having good typing in our application is that it makes refactoring easier. If\n          we had a proper typing, we would get a compile-time error as shown below:",
            "export interface HotFolder {",
            " id: string;",
            " folderName: string;",
            " enabled: string;",
            " processDefinitionName: string;",
            " params: { [key: string]: string };",
            "}",
            "export class HotFoldersAddComponent implements OnInit",
            "hotFolder: HotFolder;",
            "constructor() {",
            " }",
            "ngOnInit() {",
            "this.hotFolder = {",
            "id: 12345,",
            "folderName: ' /home/rsuite/test ',",
            "enabled: true,",
            "path: ‘test’",
            "}",
            "}",
            "}",
            "// Error",
            "Type ‘{ id: number; foldername: string; path: string; }’ is not assignable to type ‘hotFolder.",
            "Object literal may only specify known properties, and ‘path does not exist in type ‘hotFolder."
        ],
        "table": [
            "\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export interface HotFolder {</p>\n<p class=\"p\"> id: string;</p>\n<p class=\"p\"> folderName: string;</p>\n<p class=\"p\"> enabled: string;</p>\n<p class=\"p\"> processDefinitionName: string;</p>\n<p class=\"p\"> params: { [key: string]: string };</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n",
            "\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export class HotFoldersAddComponent implements OnInit</p>\n<p class=\"p\">hotFolder: HotFolder;</p>\n<p class=\"p\">constructor() {</p>\n<p class=\"p\"> }</p>\n<p class=\"p\">ngOnInit() {</p>\n<p class=\"p\">this.hotFolder = {</p>\n<p class=\"p\">id: 12345,</p>\n<p class=\"p\">folderName: ' /home/rsuite/test ',</p>\n<p class=\"p\">enabled: true,</p>\n<p class=\"p\">path: ‘test’</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n"
        ],
        "tbody": [
            "\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export interface HotFolder {</p>\n<p class=\"p\"> id: string;</p>\n<p class=\"p\"> folderName: string;</p>\n<p class=\"p\"> enabled: string;</p>\n<p class=\"p\"> processDefinitionName: string;</p>\n<p class=\"p\"> params: { [key: string]: string };</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n",
            "\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">export class HotFoldersAddComponent implements OnInit</p>\n<p class=\"p\">hotFolder: HotFolder;</p>\n<p class=\"p\">constructor() {</p>\n<p class=\"p\"> }</p>\n<p class=\"p\">ngOnInit() {</p>\n<p class=\"p\">this.hotFolder = {</p>\n<p class=\"p\">id: 12345,</p>\n<p class=\"p\">folderName: ' /home/rsuite/test ',</p>\n<p class=\"p\">enabled: true,</p>\n<p class=\"p\">path: ‘test’</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n"
        ],
        "td": [
            "\n<p class=\"p\">export interface HotFolder {</p>\n<p class=\"p\"> id: string;</p>\n<p class=\"p\"> folderName: string;</p>\n<p class=\"p\"> enabled: string;</p>\n<p class=\"p\"> processDefinitionName: string;</p>\n<p class=\"p\"> params: { [key: string]: string };</p>\n<p class=\"p\">}</p>\n",
            "\n<p class=\"p\">export class HotFoldersAddComponent implements OnInit</p>\n<p class=\"p\">hotFolder: HotFolder;</p>\n<p class=\"p\">constructor() {</p>\n<p class=\"p\"> }</p>\n<p class=\"p\">ngOnInit() {</p>\n<p class=\"p\">this.hotFolder = {</p>\n<p class=\"p\">id: 12345,</p>\n<p class=\"p\">folderName: ' /home/rsuite/test ',</p>\n<p class=\"p\">enabled: true,</p>\n<p class=\"p\">path: ‘test’</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n<p class=\"p\">}</p>\n"
        ]
    },
    "avoid_logic_in_templates.html": {
        "title": [
            "Avoid logic in templates"
        ],
        "body": [
            "\n<nav role=\"toc\">\n<ul>\n<li><a href=\"introduction.html\">Introduction</a></li>\n<li><a href=\"use_angular_cli.html\">Use Angular CLI</a></li>\n<li><a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a></li>\n<li><a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a></li>\n<li><a href=\"use_es6_features.html\">Use ES6 features</a></li>\n<li><a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a></li>\n<li><a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a></li>\n<li><a href=\"use_lazy_loading.html\">Use Lazy Loading</a></li>\n<li><a href=\"use_indexts.html\">Use Index.ts</a></li>\n<li class=\"active\"><a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a></li>\n<li><a href=\"cache_api_calls.html\"> Cache API calls</a></li>\n<li><a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a></li>\n<li><a href=\"declare_safe_strings.html\">Declare safe strings</a></li>\n<li><a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a></li>\n<li><a href=\"state_management.html\">State management</a></li>\n<li><a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a></li>\n</ul>\n</nav>\n<main role=\"main\">\n<article aria-labelledby=\"a4054395___Toc61856914\" role=\"article\">\n<h1 class=\"title topictitle1\" id=\"a4054395___Toc61856914\">Avoid logic in templates</h1>\n<div class=\"body\">\n<p class=\"p\">All template logic will be extracted into a component. This helps to cover that case in a unit test\n          and reduce bugs when there is a template change.</p>\n<p class=\"p\"><strong class=\"ph b\">Logic in templates</strong></p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"p\"><strong class=\"ph b\">Logic in component</strong></p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">this.isUnavailable = this.aliases === 'inActive' || 'hold';</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</article>\n</main>\n"
        ],
        "ul": [
            "\n<li><a href=\"introduction.html\">Introduction</a></li>\n<li><a href=\"use_angular_cli.html\">Use Angular CLI</a></li>\n<li><a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a></li>\n<li><a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a></li>\n<li><a href=\"use_es6_features.html\">Use ES6 features</a></li>\n<li><a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a></li>\n<li><a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a></li>\n<li><a href=\"use_lazy_loading.html\">Use Lazy Loading</a></li>\n<li><a href=\"use_indexts.html\">Use Index.ts</a></li>\n<li class=\"active\"><a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a></li>\n<li><a href=\"cache_api_calls.html\"> Cache API calls</a></li>\n<li><a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a></li>\n<li><a href=\"declare_safe_strings.html\">Declare safe strings</a></li>\n<li><a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a></li>\n<li><a href=\"state_management.html\">State management</a></li>\n<li><a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a></li>\n"
        ],
        "li": [
            "<a href=\"introduction.html\">Introduction</a>",
            "<a href=\"use_angular_cli.html\">Use Angular CLI</a>",
            "<a href=\"maintain_proper_folder_structure.html\">Maintain proper folder structure</a>",
            "<a href=\"follow_consistent_angular_coding_styles.html\">Follow consistent Angular coding styles</a>",
            "<a href=\"use_es6_features.html\">Use ES6 features</a>",
            "<a href=\"use_trackby_along_with_ngfor.html\">Use trackBy along with ngFor</a>",
            "<a href=\"break_down_into_small_reusable_components.html\">Break down into small reusable components</a>",
            "<a href=\"use_lazy_loading.html\">Use Lazy Loading</a>",
            "<a href=\"use_indexts.html\">Use Index.ts</a>",
            "<a href=\"avoid_logic_in_templates.html\">Avoid logic in templates</a>",
            "<a href=\"cache_api_calls.html\"> Cache API calls</a>",
            "<a href=\"use_async_pipe_in_templates.html\">Use async pipe in templates</a>",
            "<a href=\"declare_safe_strings.html\">Declare safe strings</a>",
            "<a href=\"avoid_any_type_when_declaring_constants_and_variables.html\">Avoid any type when declaring constants\n          and variables</a>",
            "<a href=\"state_management.html\">State management</a>",
            "<a href=\"use_cdk_virtual_scroll.html\">Use CDK Virtual Scroll</a>"
        ],
        "a": [
            "Introduction",
            "Use Angular CLI",
            "Maintain proper folder structure",
            "Follow consistent Angular coding styles",
            "Use ES6 features",
            "Use trackBy along with ngFor",
            "Break down into small reusable components",
            "Use Lazy Loading",
            "Use Index.ts",
            "Avoid logic in templates",
            " Cache API calls",
            "Use async pipe in templates",
            "Declare safe strings",
            "Avoid any type when declaring constants\n          and variables",
            "State management",
            "Use CDK Virtual Scroll"
        ],
        "article": [
            "\n<h1 class=\"title topictitle1\" id=\"a4054395___Toc61856914\">Avoid logic in templates</h1>\n<div class=\"body\">\n<p class=\"p\">All template logic will be extracted into a component. This helps to cover that case in a unit test\n          and reduce bugs when there is a template change.</p>\n<p class=\"p\"><strong class=\"ph b\">Logic in templates</strong></p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"p\"><strong class=\"ph b\">Logic in component</strong></p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">this.isUnavailable = this.aliases === 'inActive' || 'hold';</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n"
        ],
        "div": [
            "\n<p class=\"p\">All template logic will be extracted into a component. This helps to cover that case in a unit test\n          and reduce bugs when there is a template change.</p>\n<p class=\"p\"><strong class=\"ph b\">Logic in templates</strong></p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"p\"><strong class=\"ph b\">Logic in component</strong></p>\n<table class=\"table\">\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">this.isUnavailable = this.aliases === 'inActive' || 'hold';</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n"
        ],
        "p": [
            "All template logic will be extracted into a component. This helps to cover that case in a unit test\n          and reduce bugs when there is a template change.",
            "<strong class=\"ph b\">Logic in templates</strong>",
            "// template",
            "Status: Unavailable// component",
            "ngOnInit (): void {",
            "this.aliases=resp.value;",
            "}",
            "<strong class=\"ph b\">Logic in component</strong>",
            "// template",
            "Status: Unavailable// component",
            "ngOnInit (): void {",
            "this.aliases=resp.value;",
            "this.isUnavailable = this.aliases === 'inActive' || 'hold';",
            "}"
        ],
        "table": [
            "\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n",
            "\n<caption></caption>\n<colgroup>\n<col/>\n</colgroup>\n<tbody class=\"tbody\">\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">this.isUnavailable = this.aliases === 'inActive' || 'hold';</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n</tbody>\n"
        ],
        "tbody": [
            "\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n",
            "\n<tr class=\"row\">\n<td class=\"entry\">\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">this.isUnavailable = this.aliases === 'inActive' || 'hold';</p>\n<p class=\"p\">}</p>\n</td>\n</tr>\n"
        ],
        "td": [
            "\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">}</p>\n",
            "\n<p class=\"p\">// template</p>\n<p class=\"p\">Status: Unavailable// component</p>\n<p class=\"p\">ngOnInit (): void {</p>\n<p class=\"p\">this.aliases=resp.value;</p>\n<p class=\"p\">this.isUnavailable = this.aliases === 'inActive' || 'hold';</p>\n<p class=\"p\">}</p>\n"
        ]
    }
}